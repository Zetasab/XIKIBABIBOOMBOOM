@using FeManagement.Services
@inherits LayoutComponentBase


@inject NavigationManager NavigationManager
@inject AuthService AuthService

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />


<MudLayout id="page-container-full">
    <MudAppBar Elevation="1" Dense="@_dense" Class="gradient-bg">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.ExitToApp" Color="Color.Error" OnClick="LogOut" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_open" Class="gradient-bg2" ClipMode="_clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">¡Aniversario 1 año!</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="py-16 px-16 bgimg" Style="@($"background-image: url('Img/bg/{_bgUrl}');")">
        @Body
    </MudMainContent>
</MudLayout>


@code{

    private bool _open = false;
    private bool _dense = false;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;

    private string _bgUrl = "bg1.jpg";

    private List<string> _backgroundList { get; set; } = new List<string>()
    {
        "bg1.jpg",
        "bg2.jpg",
        "bg3.jpg",
        "bg4.jpg",
        "bg5.jpg",
        "bg6.jpg",
        "bg7.jpg",
        "bg8.jpg",
        "bg9.jpg",
        "bg10.jpg",
    };

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    protected override async Task OnInitializedAsync()
    {
        await AuthService.CheckLogged();
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    private async Task LogOut()
    {
        await AuthService.LogoutAsync();
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Tu función aquí

        // Puedes llamar a lo que quieras:

        _bgUrl = GetRandomBg();
        Console.WriteLine(_bgUrl);
        StateHasChanged();
    }

    private string GetRandomBg()
    {
        Random rand = new();
        return _backgroundList[rand.Next(1, _backgroundList.Count)];
    }

    public void Dispose()
    {
        // Muy importante para evitar fugas de memoria
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}


<style>
    .gradient-bg {
        background: linear-gradient(135deg, #6a0dad, #00ff9d);
        color: white; /* Para mejor contraste del texto */
    }.gradient-bg2 {
        background: linear-gradient(225deg, #6a0dad, #00ff9d);
        color: white; /* Para mejor contraste del texto */
    }

    #page-container-full{
        height:100vh
    }
    .bgimg{
        padding-top: 110px !important;
        min-height: 100vh;
        background-position: center;
        background-size: cover;
    }
</style>